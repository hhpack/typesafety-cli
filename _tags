# OASIS_START
# DO NOT EDIT (digest: 48be4fb77271f3eadcdfa696ae17fbf3)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library github
"src/github/github.cmxs": use_github
<src/github/*.ml{,i,y}>: package(str)
<src/github/*.ml{,i,y}>: package(threads)
# Library process
"src/process/process.cmxs": use_process
<src/process/*.ml{,i,y}>: package(lwt)
<src/process/*.ml{,i,y}>: package(str)
<src/process/*.ml{,i,y}>: package(threads)
# Library misc
"src/misc/misc.cmxs": use_misc
<src/misc/*.ml{,i,y}>: package(str)
<src/misc/*.ml{,i,y}>: package(threads)
# Library hack
"src/hack/hack.cmxs": use_hack
<src/hack/*.ml{,i,y}>: package(str)
<src/hack/*.ml{,i,y}>: package(threads)
<src/hack/*.ml{,i,y}>: use_misc
# Library env
"src/env/env.cmxs": use_env
<src/env/*.ml{,i,y}>: package(str)
<src/env/*.ml{,i,y}>: package(threads)
<src/env/*.ml{,i,y}>: use_github
# Library typechecker
"src/typechecker/typechecker.cmxs": use_typechecker
<src/typechecker/*.ml{,i,y}>: package(atdgen)
<src/typechecker/*.ml{,i,y}>: package(str)
<src/typechecker/*.ml{,i,y}>: package(threads)
# Library hhvm
"src/hhvm/hhvm.cmxs": use_hhvm
<src/hhvm/*.ml{,i,y}>: package(atdgen)
<src/hhvm/*.ml{,i,y}>: package(process)
<src/hhvm/*.ml{,i,y}>: package(str)
<src/hhvm/*.ml{,i,y}>: package(threads)
<src/hhvm/*.ml{,i,y}>: use_misc
<src/hhvm/*.ml{,i,y}>: use_typechecker
# Library review
"src/review/review.cmxs": use_review
<src/review/*.ml{,i,y}>: package(atdgen)
<src/review/*.ml{,i,y}>: package(cohttp)
<src/review/*.ml{,i,y}>: package(cohttp.lwt)
<src/review/*.ml{,i,y}>: package(lwt)
<src/review/*.ml{,i,y}>: package(lwt_ssl)
<src/review/*.ml{,i,y}>: package(str)
<src/review/*.ml{,i,y}>: package(threads)
<src/review/*.ml{,i,y}>: use_env
<src/review/*.ml{,i,y}>: use_github
<src/review/*.ml{,i,y}>: use_hack
<src/review/*.ml{,i,y}>: use_misc
<src/review/*.ml{,i,y}>: use_typechecker
# Library typesafety
"src/cli/typesafety.cmxs": use_typesafety
<src/cli/*.ml{,i,y}>: package(atdgen)
<src/cli/*.ml{,i,y}>: package(cohttp)
<src/cli/*.ml{,i,y}>: package(cohttp.lwt)
<src/cli/*.ml{,i,y}>: package(lwt)
<src/cli/*.ml{,i,y}>: package(lwt_ssl)
<src/cli/*.ml{,i,y}>: package(process)
<src/cli/*.ml{,i,y}>: package(str)
<src/cli/*.ml{,i,y}>: package(threads)
<src/cli/*.ml{,i,y}>: use_env
<src/cli/*.ml{,i,y}>: use_github
<src/cli/*.ml{,i,y}>: use_hack
<src/cli/*.ml{,i,y}>: use_hhvm
<src/cli/*.ml{,i,y}>: use_misc
<src/cli/*.ml{,i,y}>: use_review
<src/cli/*.ml{,i,y}>: use_typechecker
# Executable typesafety
"src/typesafety.native": package(atdgen)
"src/typesafety.native": package(cmdliner)
"src/typesafety.native": package(cohttp)
"src/typesafety.native": package(cohttp.lwt)
"src/typesafety.native": package(lwt)
"src/typesafety.native": package(lwt_ssl)
"src/typesafety.native": package(process)
"src/typesafety.native": package(str)
"src/typesafety.native": package(threads)
"src/typesafety.native": use_env
"src/typesafety.native": use_github
"src/typesafety.native": use_hack
"src/typesafety.native": use_hhvm
"src/typesafety.native": use_misc
"src/typesafety.native": use_review
"src/typesafety.native": use_typechecker
"src/typesafety.native": use_typesafety
<src/*.ml{,i,y}>: package(process)
<src/*.ml{,i,y}>: use_hhvm
<src/*.ml{,i,y}>: use_typesafety
# Executable typesafety_review
"src/typesafety_review.native": package(atdgen)
"src/typesafety_review.native": package(cmdliner)
"src/typesafety_review.native": package(cohttp)
"src/typesafety_review.native": package(cohttp.lwt)
"src/typesafety_review.native": package(lwt)
"src/typesafety_review.native": package(lwt_ssl)
"src/typesafety_review.native": package(str)
"src/typesafety_review.native": package(threads)
"src/typesafety_review.native": use_env
"src/typesafety_review.native": use_github
"src/typesafety_review.native": use_hack
"src/typesafety_review.native": use_misc
"src/typesafety_review.native": use_review
"src/typesafety_review.native": use_typechecker
<src/*.ml{,i,y}>: package(atdgen)
<src/*.ml{,i,y}>: package(cmdliner)
<src/*.ml{,i,y}>: package(cohttp)
<src/*.ml{,i,y}>: package(cohttp.lwt)
<src/*.ml{,i,y}>: package(lwt)
<src/*.ml{,i,y}>: package(lwt_ssl)
<src/*.ml{,i,y}>: package(str)
<src/*.ml{,i,y}>: package(threads)
<src/*.ml{,i,y}>: use_env
<src/*.ml{,i,y}>: use_github
<src/*.ml{,i,y}>: use_hack
<src/*.ml{,i,y}>: use_misc
<src/*.ml{,i,y}>: use_review
<src/*.ml{,i,y}>: use_typechecker
# Executable test
"tests/test.native": package(atdgen)
"tests/test.native": package(cohttp)
"tests/test.native": package(cohttp.lwt)
"tests/test.native": package(lwt)
"tests/test.native": package(lwt_ssl)
"tests/test.native": package(oUnit)
"tests/test.native": package(process)
"tests/test.native": package(str)
"tests/test.native": package(threads)
"tests/test.native": use_env
"tests/test.native": use_github
"tests/test.native": use_hack
"tests/test.native": use_hhvm
"tests/test.native": use_misc
"tests/test.native": use_review
"tests/test.native": use_typechecker
"tests/test.native": use_typesafety
<tests/*.ml{,i,y}>: package(atdgen)
<tests/*.ml{,i,y}>: package(cohttp)
<tests/*.ml{,i,y}>: package(cohttp.lwt)
<tests/*.ml{,i,y}>: package(lwt)
<tests/*.ml{,i,y}>: package(lwt_ssl)
<tests/*.ml{,i,y}>: package(oUnit)
<tests/*.ml{,i,y}>: package(process)
<tests/*.ml{,i,y}>: package(str)
<tests/*.ml{,i,y}>: package(threads)
<tests/*.ml{,i,y}>: use_env
<tests/*.ml{,i,y}>: use_github
<tests/*.ml{,i,y}>: use_hack
<tests/*.ml{,i,y}>: use_hhvm
<tests/*.ml{,i,y}>: use_misc
<tests/*.ml{,i,y}>: use_review
<tests/*.ml{,i,y}>: use_typechecker
<tests/*.ml{,i,y}>: use_typesafety
# OASIS_STOP
